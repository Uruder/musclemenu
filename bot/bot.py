import logging
import os
import random
import aiohttp
from aiogram import Bot, Dispatcher, types
from aiogram.utils.executor import start_webhook
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from dotenv import load_dotenv
from database import Database
from datetime import datetime, timedelta

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
WEBHOOK_HOST = os.getenv("WEBHOOK_HOST")
WEBHOOK_PATH = f"/webhook/{BOT_TOKEN}"
WEBHOOK_URL = f"{WEBHOOK_HOST}{WEBHOOK_PATH}"
WEBAPP_HOST = "0.0.0.0"
WEBAPP_PORT = int(os.getenv("PORT", 8080))
GROK_API_KEY = os.getenv("GROK_API_KEY")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)
db = Database()

# –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API
API_REQUESTS_PER_DAY = 50
api_requests_today = 0
last_reset = datetime.now()

# –ë–∞–∑–∞ —Ä–µ—Ü–µ–ø—Ç–æ–≤
RECIPES = [
    {"name": "–û–≤—Å—è–Ω–∫–∞ —Å –±–∞–Ω–∞–Ω–æ–º", "calories": 400, "protein": 10, "fat": 5, "carbs": 70, "recipe": "ü•£ 100–≥ –æ–≤—Å—è–Ω–∫–∏, üçå 1 –±–∞–Ω–∞–Ω. –ó–∞–ª–µ–π –∫–∏–ø—è—Ç–∫–æ–º, –¥–∞–π –Ω–∞—Å—Ç–æ—è—Ç—å—Å—è 5 –º–∏–Ω."},
    {"name": "–ö—É—Ä–∏—Ü–∞ —Å —Ä–∏—Å–æ–º", "calories": 600, "protein": 50, "fat": 10, "carbs": 60, "recipe": "üçó 150–≥ –∫—É—Ä–∏–Ω–æ–π –≥—Ä—É–¥–∫–∏, üçö 80–≥ —Ä–∏—Å–∞. –û—Ç–≤–∞—Ä–∏ –∫—É—Ä–∏—Ü—É –∏ —Ä–∏—Å."},
    {"name": "–¢–≤–æ—Ä–æ–≥ —Å —è–±–ª–æ–∫–æ–º", "calories": 350, "protein": 30, "fat": 5, "carbs": 40, "recipe": "üßÄ 150–≥ —Ç–≤–æ—Ä–æ–≥–∞ 5%, üçé 1 —è–±–ª–æ–∫–æ. –ù–∞—Ä–µ–∂—å —è–±–ª–æ–∫–æ, —Å–º–µ—à–∞–π —Å —Ç–≤–æ—Ä–æ–≥–æ–º."},
    {"name": "–Ø–∏—á–Ω–∏—Ü–∞ —Å –∫–∞—Ä—Ç–æ—Ñ–µ–ª–µ–º", "calories": 500, "protein": 20, "fat": 25, "carbs": 50, "recipe": "ü•ö 3 —è–π—Ü–∞, ü•î 200–≥ –∫–∞—Ä—Ç–æ—Ñ–µ–ª—è. –û–±–∂–∞—Ä—å —è–π—Ü–∞ —Å –≤–∞—Ä–µ–Ω—ã–º –∫–∞—Ä—Ç–æ—Ñ–µ–ª–µ–º."},
]

# –ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ü–∏—Ç–∞—Ç—ã
QUOTES = {
    "ru": [
        "üí™ –°–∏–ª–∞ –≤ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–µ, –∞ –Ω–µ –≤ –º–æ—Ç–∏–≤–∞—Ü–∏–∏!",
        "üèãÔ∏è‚Äç‚ôÇÔ∏è –ö–∞–∂–¥—ã–π —à–∞–≥ –ø—Ä–∏–±–ª–∏–∂–∞–µ—Ç —Ç–µ–±—è –∫ —Ü–µ–ª–∏!",
        "üçó –ï—à—å, —á—Ç–æ–±—ã —Ä–∞—Å—Ç–∏!",
        "üèãÔ∏è –¢—ã —Å–∏–ª—å–Ω–µ–µ, —á–µ–º –¥—É–º–∞–µ—à—å!"
    ],
    "en": [
        "üí™ Strength lies in discipline, not motivation!",
        "üèãÔ∏è‚Äç‚ôÇÔ∏è Every step brings you closer to your goal!",
        "üçó Eat to grow!",
        "üèãÔ∏è You‚Äôre stronger than you think!"
    ],
    "uk": [
        "üí™ –°–∏–ª–∞ –≤ –¥–∏—Å—Ü–∏–ø–ª—ñ–Ω—ñ, –∞ –Ω–µ –≤ –º–æ—Ç–∏–≤–∞—Ü—ñ—ó!",
        "üèãÔ∏è‚Äç‚ôÇÔ∏è –ö–æ–∂–µ–Ω –∫—Ä–æ–∫ –Ω–∞–±–ª–∏–∂–∞—î —Ç–µ–±–µ –¥–æ –º–µ—Ç–∏!",
        "üçó –á–∂, —â–æ–± —Ä–æ—Å—Ç–∏!",
        "üèãÔ∏è –¢–∏ —Å–∏–ª—å–Ω—ñ—à–∏–π, –Ω—ñ–∂ –¥—É–º–∞—î—à!"
    ]
}

# –¢–µ–∫—Å—Ç—ã –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–∞—Ö
TEXTS = {
    "ru": {
        "welcome": "üí™ *–ü—Ä–∏–≤–µ—Ç! –Ø MuscleMenu!* –ü–æ–º–æ–≥—É —Ç–µ–±–µ –Ω–∞–±—Ä–∞—Ç—å –º–∞—Å—Å—É.\n–î–∞–≤–∞–π –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ç–µ–±—è. –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?",
        "name": "–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?",
        "height": "–ö–∞–∫–æ–π —É —Ç–µ–±—è —Ä–æ—Å—Ç (–≤ —Å–º)?",
        "weight": "–ö–∞–∫–æ–π —É —Ç–µ–±—è –≤–µ—Å (–≤ –∫–≥)?",
        "age": "–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?",
        "activity": "–ö–∞–∫–æ–π —É —Ç–µ–±—è —É—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (–Ω–∏–∑–∫–∞—è/—Å—Ä–µ–¥–Ω—è—è/–≤—ã—Å–æ–∫–∞—è)?",
        "workouts": "–°–∫–æ–ª—å–∫–æ —É —Ç–µ–±—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –≤ –Ω–µ–¥–µ–ª—é?",
        "preferences": "–ö–∞–∫–∏–µ –ø—Ä–æ–¥—É–∫—Ç—ã —Ç—ã –ª—é–±–∏—à—å? (–ù–∞–ø—Ä–∏–º–µ—Ä: üçó –∫—É—Ä–∏—Ü–∞, ü•ö —è–π—Ü–∞, üçö —Ä–∏—Å)\n–û—Å—Ç–∞–≤—å –ø—É—Å—Ç—ã–º, –µ—Å–ª–∏ –Ω–µ—Ç –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π.",
        "saved": "‚úÖ *–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!* –ß—Ç–æ –¥–∞–ª—å—à–µ?",
        "profile": "üë§ *–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç*",
        "weekly_plan": "üìÖ *–¢–≤–æ–π –Ω–µ–¥–µ–ª—å–Ω—ã–π –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è* üí™",
        "daily_plan": "üçΩ *–î–Ω–µ–≤–Ω–æ–π —Ä–∞—Ü–∏–æ–Ω* üçΩ",
        "update_weight": "‚öñÔ∏è –£–∫–∞–∂–∏ —Å–≤–æ–π —Ç–µ–∫—É—â–∏–π –≤–µ—Å (–≤ –∫–≥):",
        "weight_updated": "‚úÖ –í–µ—Å –æ–±–Ω–æ–≤–ª–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ.",
        "guess_game": "üé≤ *–£–≥–∞–¥–∞–π –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å!*",
        "guess_prompt": "–°–∫–æ–ª—å–∫–æ –∫–∞–ª–æ—Ä–∏–π? –£–∫–∞–∂–∏ —á–∏—Å–ª–æ!",
        "guess_correct": "üéâ –û—Ç–ª–∏—á–Ω–æ! –¢—ã —É–≥–∞–¥–∞–ª –ø–æ—á—Ç–∏ —Ç–æ—á–Ω–æ!\n–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: `{actual} –∫–∫–∞–ª`\n–¢–≤–æ–π –æ—Ç–≤–µ—Ç: `{guess} –∫–∫–∞–ª`",
        "guess_wrong": "ü§î –ù–µ–ø–ª–æ—Ö–æ, –Ω–æ –Ω–µ —Å–æ–≤—Å–µ–º! –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: `{actual} –∫–∫–∞–ª`\n–¢–≤–æ–π –æ—Ç–≤–µ—Ç: `{guess} –∫–∫–∞–ª`",
        "payment_success": "üéâ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!",
        "register_first": "–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è!",
        "back_to_main": "üí™ *MuscleMenu* ‚Äî —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ –Ω–∞–±–æ—Ä–µ –º–∞—Å—Å—ã!\n–ß—Ç–æ –¥–∞–ª—å—à–µ?",
        "my_day": "üìä *–ú–æ–π –¥–µ–Ω—å*",
        "random_tip": "üí° *–°–ª—É—á–∞–π–Ω—ã–π —Å–æ–≤–µ—Ç*",
        "subscription_end": "‚è∞ –¢–≤–æ—è –ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ {days} –¥–Ω–µ–π! –ü—Ä–æ–¥–ª–∏ –∑–∞ 500 UAH –∏–ª–∏ 50 XTR.",
        "subscription_expired": "‚ö†Ô∏è –¢–≤–æ—è –ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å. –î–æ—Å—Ç—É–ø –∫ –¥–Ω–µ–≤–Ω–æ–º—É —Ä–∞—Ü–∏–æ–Ω—É –æ–≥—Ä–∞–Ω–∏—á–µ–Ω."
    },
    "en": {
        "welcome": "üí™ *Hello! I‚Äôm MuscleMenu!* I‚Äôll help you gain mass.\nLet‚Äôs get you registered. What‚Äôs your name?",
        "name": "What‚Äôs your name?",
        "height": "What‚Äôs your height (in cm)?",
        "weight": "What‚Äôs your weight (in kg)?",
        "age": "How old are you?",
        "activity": "What‚Äôs your activity level (low/medium/high)?",
        "workouts": "How many workouts do you have per week?",
        "preferences": "What foods do you like? (E.g., üçó chicken, ü•ö eggs, üçö rice)\nLeave empty if no preferences.",
        "saved": "‚úÖ *Data saved!* What‚Äôs next?",
        "profile": "üë§ *Profile*",
        "weekly_plan": "üìÖ *Your Weekly Nutrition Plan* üí™",
        "daily_plan": "üçΩ *Daily Meal Plan* üçΩ",
        "update_weight": "‚öñÔ∏è Enter your current weight (in kg):",
        "weight_updated": "‚úÖ Weight updated! Check your progress in your profile.",
        "guess_game": "üé≤ *Guess the Calories!*",
        "guess_prompt": "How many calories? Enter a number!",
        "guess_correct": "üéâ Great job! Almost spot on!\nCorrect answer: `{actual} kcal`\nYour guess: `{guess} kcal`",
        "guess_wrong": "ü§î Not bad, but not quite! Correct answer: `{actual} kcal`\nYour guess: `{guess} kcal`",
        "payment_success": "üéâ Thank you for your purchase!",
        "register_first": "Register first!",
        "back_to_main": "üí™ *MuscleMenu* ‚Äî your mass-gaining assistant!\nWhat‚Äôs next?",
        "my_day": "üìä *My Day*",
        "random_tip": "üí° *Random Tip*",
        "subscription_end": "‚è∞ Your subscription ends in {days} days! Renew for 500 UAH or 50 XTR.",
        "subscription_expired": "‚ö†Ô∏è Your subscription has expired. Access to daily meal plans is restricted."
    },
    "uk": {
        "welcome": "üí™ *–ü—Ä–∏–≤—ñ—Ç! –Ø MuscleMenu!* –î–æ–ø–æ–º–æ–∂—É —Ç–æ–±—ñ –Ω–∞–±—Ä–∞—Ç–∏ –º–∞—Å—É.\n–î–∞–≤–∞–π –∑–∞—Ä–µ—î—Å—Ç—Ä—É—î–º–æ —Ç–µ–±–µ. –Ø–∫ —Ç–µ–±–µ –∑–≤–∞—Ç–∏?",
        "name": "–Ø–∫ —Ç–µ–±–µ –∑–≤–∞—Ç–∏?",
        "height": "–Ø–∫–∏–π —É —Ç–µ–±–µ –∑—Ä—ñ—Å—Ç (–≤ —Å–º)?",
        "weight": "–Ø–∫–∞ —É —Ç–µ–±–µ –≤–∞–≥–∞ (–≤ –∫–≥)?",
        "age": "–°–∫—ñ–ª—å–∫–∏ —Ç–æ–±—ñ —Ä–æ–∫—ñ–≤?",
        "activity": "–Ø–∫–∏–π —É —Ç–µ–±–µ —Ä—ñ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ (–Ω–∏–∑—å–∫–∏–π/—Å–µ—Ä–µ–¥–Ω—ñ–π/–≤–∏—Å–æ–∫–∏–π)?",
        "workouts": "–°–∫—ñ–ª—å–∫–∏ —É —Ç–µ–±–µ —Ç—Ä–µ–Ω—É–≤–∞–Ω—å –Ω–∞ —Ç–∏–∂–¥–µ–Ω—å?",
        "preferences": "–Ø–∫—ñ –ø—Ä–æ–¥—É–∫—Ç–∏ —Ç–∏ –ª—é–±–∏—à? (–ù–∞–ø—Ä–∏–∫–ª–∞–¥: üçó –∫—É—Ä–∫–∞, ü•ö —è–π—Ü—è, üçö —Ä–∏—Å)\n–ó–∞–ª–∏—à –ø–æ—Ä–æ–∂–Ω—ñ–º, —è–∫—â–æ –Ω–µ–º–∞—î –≤–ø–æ–¥–æ–±–∞–Ω—å.",
        "saved": "‚úÖ *–î–∞–Ω—ñ –∑–±–µ—Ä–µ–∂–µ–Ω–æ!* –©–æ –¥–∞–ª—ñ?",
        "profile": "üë§ *–û—Å–æ–±–∏—Å—Ç–∏–π –∫–∞–±—ñ–Ω–µ—Ç*",
        "weekly_plan": "üìÖ *–¢–≤—ñ–π —Ç–∏–∂–Ω–µ–≤–∏–π –ø–ª–∞–Ω —Ö–∞—Ä—á—É–≤–∞–Ω–Ω—è* üí™",
        "daily_plan": "üçΩ *–î–µ–Ω–Ω–∏–π —Ä–∞—Ü—ñ–æ–Ω* üçΩ",
        "update_weight": "‚öñÔ∏è –í–∫–∞–∂–∏ —Å–≤–æ—é –ø–æ—Ç–æ—á–Ω—É –≤–∞–≥—É (–≤ –∫–≥):",
        "weight_updated": "‚úÖ –í–∞–≥–∞ –æ–Ω–æ–≤–ª–µ–Ω–∞! –ü–µ—Ä–µ–≤—ñ—Ä –ø—Ä–æ–≥—Ä–µ—Å —É –æ—Å–æ–±–∏—Å—Ç–æ–º—É –∫–∞–±—ñ–Ω–µ—Ç—ñ.",
        "guess_game": "üé≤ *–í–≥–∞–¥–∞–π –∫–∞–ª–æ—Ä—ñ–π–Ω—ñ—Å—Ç—å!*",
        "guess_prompt": "–°–∫—ñ–ª—å–∫–∏ –∫–∞–ª–æ—Ä—ñ–π? –í–∫–∞–∂–∏ —á–∏—Å–ª–æ!",
        "guess_correct": "üéâ –ß—É–¥–æ–≤–æ! –¢–∏ –≤–≥–∞–¥–∞–≤ –º–∞–π–∂–µ —Ç–æ—á–Ω–æ!\n–ü—Ä–∞–≤–∏–ª—å–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å: `{actual} –∫–∫–∞–ª`\n–¢–≤–æ—è –≤—ñ–¥–ø–æ–≤—ñ–¥—å: `{guess} –∫–∫–∞–ª`",
        "guess_wrong": "ü§î –ù–µ–ø–æ–≥–∞–Ω–æ, –∞–ª–µ –Ω–µ –∑–æ–≤—Å—ñ–º! –ü—Ä–∞–≤–∏–ª—å–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å: `{actual} –∫–∫–∞–ª`\n–¢–≤–æ—è –≤—ñ–¥–ø–æ–≤—ñ–¥—å: `{guess} –∫–∫–∞–ª`",
        "payment_success": "üéâ –î—è–∫—É—é –∑–∞ –ø–æ–∫—É–ø–∫—É!",
        "register_first": "–°–ø–æ—á–∞—Ç–∫—É –∑–∞—Ä–µ—î—Å—Ç—Ä—É–π—Å—è!",
        "back_to_main": "üí™ *MuscleMenu* ‚Äî —Ç–≤—ñ–π –ø–æ–º—ñ—á–Ω–∏–∫ —É –Ω–∞–±–æ—Ä—ñ –º–∞—Å–∏!\n–©–æ –¥–∞–ª—ñ?",
        "my_day": "üìä *–ú—ñ–π –¥–µ–Ω—å*",
        "random_tip": "üí° *–í–∏–ø–∞–¥–∫–æ–≤–∞ –ø–æ—Ä–∞–¥–∞*",
        "subscription_end": "‚è∞ –¢–≤–æ—è –ø—ñ–¥–ø–∏—Å–∫–∞ –∑–∞–∫—ñ–Ω—á—É—î—Ç—å—Å—è —á–µ—Ä–µ–∑ {days} –¥–Ω—ñ–≤! –ü—Ä–æ–¥–æ–≤–∂ –∑–∞ 500 UAH –∞–±–æ 50 XTR.",
        "subscription_expired": "‚ö†Ô∏è –¢–≤–æ—è –ø—ñ–¥–ø–∏—Å–∫–∞ –∑–∞–∫—ñ–Ω—á–∏–ª–∞—Å—è. –î–æ—Å—Ç—É–ø –¥–æ –¥–µ–Ω–Ω–æ–≥–æ —Ä–∞—Ü—ñ–æ–Ω—É –æ–±–º–µ–∂–µ–Ω–æ."
    }
}

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –æ–ø—Ä–æ—Å–∞
class UserForm(StatesGroup):
    name = State()
    height = State()
    weight = State()
    age = State()
    activity = State()
    workouts = State()
    preferences = State()

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def get_main_menu(language="ru"):
    return InlineKeyboardMarkup().row(
        InlineKeyboardButton("üìÖ", callback_data="weekly_plan"),
        InlineKeyboardButton("üçΩ", callback_data="daily_plan")
    ).row(
        InlineKeyboardButton("üë§", callback_data="profile"),
        InlineKeyboardButton("‚öñÔ∏è", callback_data="update_weight")
    ).row(
        InlineKeyboardButton("üé≤", callback_data="guess_game"),
        InlineKeyboardButton("üìä", callback_data="my_day")
    ).row(
        InlineKeyboardButton("üí°", callback_data="random_tip"),
        InlineKeyboardButton("üåê –Ø–∑—ã–∫" if language == "ru" else "üåê Language" if language == "en" else "üåê –ú–æ–≤–∞", callback_data="switch_language")
    )

# –ú–µ–Ω—é —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥" –∏ "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è"
def get_back_menu(text_to_share="", language="ru"):
    markup = InlineKeyboardMarkup().add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥" if language == "ru" else "‚¨ÖÔ∏è Back" if language == "en" else "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main"))
    if text_to_share:
        markup.add(InlineKeyboardButton("üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è" if language == "ru" else "üì§ Share" if language == "en" else "üì§ –ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è", url=f"https://t.me/share/url?url={text_to_share.replace(' ', '%20')}"))
    return markup

async def create_stripe_link(user_id):
    session = stripe.checkout.Session.create(
        payment_method_types=["card"],
        line_items=[{
            "price_data": {
                "currency": "uah",
                "product_data": {"name": "Monthly Meal Plan Subscription"},
                "unit_amount": 50000,  # 500 UAH
            },
            "quantity": 1,
        }],
        mode="payment",
        success_url=f"{WEBHOOK_HOST}/success",
        cancel_url=f"{WEBHOOK_HOST}/cancel",
        metadata={"user_id": str(user_id)}
    )
    return session.url

async def generate_daily_recipe(user_data):
    return "–ü—Ä–∏–º–µ—Ä –¥–Ω–µ–≤–Ω–æ–≥–æ —Ä–∞—Ü–∏–æ–Ω–∞"

@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    user = await db.get_user(message.from_user.id)
    language = user["language"] if user else "ru"
    await message.reply(TEXTS[language]["welcome"], parse_mode="Markdown")
    await UserForm.name.set()

@dp.message_handler(state=UserForm.name)
async def process_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    user = await db.get_user(message.from_user.id)
    language = user["language"] if user else "ru"
    await message.reply(TEXTS[language]["height"])
    await UserForm.height.set()

@dp.message_handler(state=UserForm.height)
async def process_height(message: types.Message, state: FSMContext):
    try:
        height = int(message.text)
        await state.update_data(height=height)
        user = await db.get_user(message.from_user.id)
        language = user["language"] if user else "ru"
        await message.reply(TEXTS[language]["weight"])
        await UserForm.weight.set()
    except ValueError:
        user = await db.get_user(message.from_user.id)
        language = user["language"] if user else "ru"
        await message.reply(f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ —á–∏—Å–ª–æ. {TEXTS[language]['height']}")

@dp.message_handler(state=UserForm.weight)
async def process_weight(message: types.Message, state: FSMContext):
    try:
        weight = int(message.text)
        await state.update_data(weight=weight)
        user = await db.get_user(message.from_user.id)
        language = user["language"] if user else "ru"
        await message.reply(TEXTS[language]["age"])
        await UserForm.age.set()
    except ValueError:
        user = await db.get_user(message.from_user.id)
        language = user["language"] if user else "ru"
        await message.reply(f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ —á–∏—Å–ª–æ. {TEXTS[language]['weight']}")

@dp.message_handler(state=UserForm.age)
async def process_age(message: types.Message, state: FSMContext):
    try:
        age = int(message.text)
        await state.update_data(age=age)
        user = await db.get_user(message.from_user.id)
        language = user["language"] if user else "ru"
        await message.reply(TEXTS[language]["activity"])
        await UserForm.activity.set()
    except ValueError:
        user = await db.get_user(message.from_user.id)
        language = user["language"] if user else "ru"
        await message.reply(f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ —á–∏—Å–ª–æ. {TEXTS[language]['age']}")

@dp.message_handler(state=UserForm.activity)
async def process_activity(message: types.Message, state: FSMContext):
    activity = message.text.lower()
    if activity not in ["–Ω–∏–∑–∫–∞—è", "—Å—Ä–µ–¥–Ω—è—è", "–≤—ã—Å–æ–∫–∞—è", "low", "medium", "high", "–Ω–∏–∑—å–∫–∏–π", "—Å–µ—Ä–µ–¥–Ω—ñ–π", "–≤–∏—Å–æ–∫–∏–π"]:
        user = await db.get_user(message.from_user.id)
        language = user["language"] if user else "ru"
        await message.reply(f"–£–∫–∞–∂–∏: –Ω–∏–∑–∫–∞—è/—Å—Ä–µ–¥–Ω—è—è/–≤—ã—Å–æ–∫–∞—è (–∏–ª–∏ low/medium/high, –Ω–∏–∑—å–∫–∏–π/—Å–µ—Ä–µ–¥–Ω—ñ–π/–≤–∏—Å–æ–∫–∏–π). {TEXTS[language]['activity']}")
        return
    await state.update_data(activity=activity)
    user = await db.get_user(message.from_user.id)
    language = user["language"] if user else "ru"
    await message.reply(TEXTS[language]["workouts"])
    await UserForm.workouts.set()

@dp.message_handler(state=UserForm.workouts)
async def process_workouts(message: types.Message, state: FSMContext):
    try:
        workouts = int(message.text)
        await state.update_data(workouts=workouts)
        user = await db.get_user(message.from_user.id)
        language = user["language"] if user else "ru"
        await message.reply(TEXTS[language]["preferences"])
        await UserForm.preferences.set()
    except ValueError:
        user = await db.get_user(message.from_user.id)
        language = user["language"] if user else "ru"
        await message.reply(f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ —á–∏—Å–ª–æ. {TEXTS[language]['workouts']}")

@dp.message_handler(state=UserForm.preferences)
async def process_preferences(message: types.Message, state: FSMContext):
    preferences = message.text.strip()
    data = await state.get_data()
    user = await db.get_user(message.from_user.id)
    language = user["language"] if user else "ru"
    await db.add_user(
        message.from_user.id, data["name"], data["height"], data["weight"],
        data["age"], data["activity"], data["workouts"], preferences, language
    )
    await message.reply(TEXTS[language]["saved"], reply_markup=get_main_menu(language), parse_mode="Markdown")
    await state.finish()

@dp.callback_query_handler(lambda c: c.data == "daily_plan")
async def daily_plan(callback: types.CallbackQuery):
    user = await db.get_user(callback.from_user.id)
    if not user:
        language = "ru"
        await callback.message.reply(TEXTS[language]["register_first"], reply_markup=get_main_menu(language))
        return
    language = user["language"]
    subscription = await db.get_subscription(callback.from_user.id)
    now = datetime.now()

    if subscription and subscription["subscription_end"] and subscription["subscription_end"] > now:
        ration = await generate_daily_recipe(user)
        await callback.message.reply(ration, reply_markup=get_back_menu(ration, language), parse_mode="Markdown")
    elif subscription and subscription["trial_used"]:
        markup = InlineKeyboardMarkup().row(
            InlineKeyboardButton("üí´ Stars (50 XTR)", callback_data="pay_stars"),
            InlineKeyboardButton("üí≥ –ö–∞—Ä—Ç–∞ (500 UAH)", callback_data="pay_stripe")
        ).add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥" if language == "ru" else "‚¨ÖÔ∏è Back" if language == "en" else "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main"))
        await callback.message.reply(
            "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 30 –¥–Ω–µ–π –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–Ω–µ–≤–Ω–æ–º—É —Ä–∞—Ü–∏–æ–Ω—É:" if language == "ru" else
            "Subscription for 30 days of daily meal plans:" if language == "en" else
            "–ü—ñ–¥–ø–∏—Å–∫–∞ –Ω–∞ 30 –¥–Ω—ñ–≤ –¥–æ—Å—Ç—É–ø—É –¥–æ –¥–µ–Ω–Ω–æ–≥–æ —Ä–∞—Ü—ñ–æ–Ω—É:",
            reply_markup=markup
        )
    else:
        await db.set_trial_used(callback.from_user.id)
        ration = await generate_daily_recipe(user)
        await callback.message.reply(ration, reply_markup=get_back_menu(ration, language), parse_mode="Markdown")

@dp.callback_query_handler(lambda c: c.data == "pay_stars")
async def pay_stars(callback: types.CallbackQuery):
    user = await db.get_user(callback.from_user.id)
    language = user["language"]
    await bot.send_invoice(
        callback.from_user.id,
        title="–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 30 –¥–Ω–µ–π" if language == "ru" else "30-Day Subscription" if language == "en" else "–ü—ñ–¥–ø–∏—Å–∫–∞ –Ω–∞ 30 –¥–Ω—ñ–≤",
        description="–î–æ—Å—Ç—É–ø –∫ –¥–Ω–µ–≤–Ω–æ–º—É —Ä–∞—Ü–∏–æ–Ω—É –Ω–∞ 30 –¥–Ω–µ–π" if language == "ru" else "Access to daily meal plans for 30 days" if language == "en" else "–î–æ—Å—Ç—É–ø –¥–æ –¥–µ–Ω–Ω–æ–≥–æ —Ä–∞—Ü—ñ–æ–Ω—É –Ω–∞ 30 –¥–Ω—ñ–≤",
        provider_token="",
        currency="XTR",
        prices=[types.LabeledPrice(label="–ü–æ–¥–ø–∏—Å–∫–∞" if language == "ru" else "Subscription" if language == "en" else "–ü—ñ–¥–ø–∏—Å–∫–∞", amount=50)],
        payload="subscription_stars"
    )

@dp.callback_query_handler(lambda c: c.data == "pay_stripe")
async def pay_stripe(callback: types.CallbackQuery):
    user = await db.get_user(callback.from_user.id)
    language = user["language"]
    payment_url = await create_stripe_link(callback.from_user.id)
    markup = InlineKeyboardMarkup().add(InlineKeyboardButton("–û–ø–ª–∞—Ç–∏—Ç—å" if language == "ru" else "Pay" if language == "en" else "–°–ø–ª–∞—Ç–∏—Ç–∏", url=payment_url))
    await callback.message.reply(
        "–ü–µ—Ä–µ–π–¥–∏ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã (500 UAH):" if language == "ru" else
        "Follow the link to pay (500 UAH):" if language == "en" else
        "–ü–µ—Ä–µ–π–¥–∏ –∑–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º –¥–ª—è –æ–ø–ª–∞—Ç–∏ (500 UAH):",
        reply_markup=markup
    )

@dp.pre_checkout_query_handler()
async def pre_checkout(pre_checkout_query: types.PreCheckoutQuery):
    await bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)

@dp.message_handler(content_types=types.ContentType.SUCCESSFUL_PAYMENT)
async def successful_payment(message: types.Message):
    user = await db.get_user(message.from_user.id)
    language = user["language"]
    subscription_end = datetime.now() + timedelta(days=30)
    await db.set_subscription(message.from_user.id, subscription_end)
    ration = await generate_daily_recipe(user)
    await message.reply(ration + f"\n\n{TEXTS[language]['payment_success']}", reply_markup=get_back_menu(ration, language), parse_mode="Markdown")

async def send_reminders():
    while True:
        await asyncio.sleep(24 * 60 * 60)  # –ö–∞–∂–¥—ã–µ 24 —á–∞—Å–∞
        async with db.pool.acquire() as conn:
            users = await conn.fetch("SELECT user_id, language FROM users")
            now = datetime.now()
            for user in users:
                language = user["language"]
                quote = random.choice(QUOTES[language])
                subscription = await db.get_subscription(user["user_id"])
                msg = f"‚è∞ {quote}"
                if subscription and subscription["subscription_end"]:
                    days_left = (subscription["subscription_end"] - now).days
                    if days_left <= 3 and days_left > 0:
                        msg += f"\n\n{TEXTS[language]['subscription_end'].format(days=days_left)}"
                    elif days_left <= 0:
                        await db.reset_subscription(user["user_id"])
                        msg += f"\n\n{TEXTS[language]['subscription_expired']}"
                await bot.send_message(user["user_id"], msg, reply_markup=get_main_menu(language))

async def on_startup(_):
    await db.connect()
    await db.create_tables()
    await bot.set_webhook(WEBHOOK_URL)
    asyncio.create_task(send_reminders())
    logging.info(f"Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {WEBHOOK_URL}")

async def on_shutdown(_):
    await bot.delete_webhook()
    await dp.storage.close()
    await dp.storage.wait_closed()
    await db.pool.close()
    logging.info("Webhook –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

if __name__ == "__main__":
    start_webhook(
        dispatcher=dp,
        webhook_path=WEBHOOK_PATH,
        on_startup=on_startup,
        on_shutdown=on_shutdown,
        skip_updates=True,
        host=WEBAPP_HOST,
        port=WEBAPP_PORT,
    )
