import logging
import os
import random
import aiohttp
from aiogram import Bot, Dispatcher, types
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application
from aiohttp import web
from dotenv import load_dotenv
from database import Database
from datetime import datetime, timedelta
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command
import asyncio

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
WEBHOOK_HOST = os.getenv("WEBHOOK_HOST")
WEBHOOK_PATH = f"/webhook/{BOT_TOKEN}"
WEBHOOK_URL = f"{WEBHOOK_HOST}{WEBHOOK_PATH}"
WEBAPP_HOST = "0.0.0.0"
WEBAPP_PORT = int(os.getenv("PORT", 8080))
GROK_API_KEY = os.getenv("GROK_API_KEY")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logging.info(f"Bot starting with token: {BOT_TOKEN[:10]}...")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()
logging.info("Bot and Dispatcher initialized")

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
db = Database()
logging.info("Database object created")

# –ë–∞–∑–∞ —Ä–µ—Ü–µ–ø—Ç–æ–≤
RECIPES = [
    {
        "name": {
            "ru": "–û–≤—Å—è–Ω–∫–∞ —Å –±–∞–Ω–∞–Ω–æ–º",
            "en": "Oatmeal with Banana",
            "uk": "–í—ñ–≤—Å—è–Ω–∫–∞ –∑ –±–∞–Ω–∞–Ω–æ–º"
        },
        "calories": 400,
        "protein": 10,
        "fat": 5,
        "carbs": 70,
        "recipe": {
            "ru": "ü•£ 100–≥ –æ–≤—Å—è–Ω–∫–∏, üçå 1 –±–∞–Ω–∞–Ω. –ó–∞–ª–µ–π –∫–∏–ø—è—Ç–∫–æ–º, –¥–∞–π –Ω–∞—Å—Ç–æ—è—Ç—å—Å—è 5 –º–∏–Ω.",
            "en": "ü•£ 100g oatmeal, üçå 1 banana. Pour boiling water, let it steep for 5 min.",
            "uk": "ü•£ 100–≥ –≤—ñ–≤—Å—è–Ω–∫–∏, üçå 1 –±–∞–Ω–∞–Ω. –ó–∞–ª–∏–π –æ–∫—Ä–æ–ø–æ–º, –¥–∞–π –Ω–∞—Å—Ç–æ—è—Ç–∏—Å—è 5 —Ö–≤."
        }
    },
    {
        "name": {
            "ru": "–ö—É—Ä–∏—Ü–∞ —Å —Ä–∏—Å–æ–º",
            "en": "Chicken with Rice",
            "uk": "–ö—É—Ä–∫–∞ –∑ —Ä–∏—Å–æ–º"
        },
        "calories": 600,
        "protein": 50,
        "fat": 10,
        "carbs": 60,
        "recipe": {
            "ru": "üçó 150–≥ –∫—É—Ä–∏–Ω–æ–π –≥—Ä—É–¥–∫–∏, üçö 80–≥ —Ä–∏—Å–∞. –û—Ç–≤–∞—Ä–∏ –∫—É—Ä–∏—Ü—É –∏ —Ä–∏—Å.",
            "en": "üçó 150g chicken breast, üçö 80g rice. Boil chicken and rice.",
            "uk": "üçó 150–≥ –∫—É—Ä—è—á–æ—ó –≥—Ä—É–¥–∫–∏, üçö 80–≥ —Ä–∏—Å—É. –í—ñ–¥–≤–∞—Ä–∏ –∫—É—Ä–∫—É —Ç–∞ —Ä–∏—Å."
        }
    },
    {
        "name": {
            "ru": "–¢–≤–æ—Ä–æ–≥ —Å —è–±–ª–æ–∫–æ–º",
            "en": "Cottage Cheese with Apple",
            "uk": "–¢–≤–æ—Ä–æ–≥ –∑ —è–±–ª—É–∫–æ–º"
        },
        "calories": 350,
        "protein": 30,
        "fat": 5,
        "carbs": 40,
        "recipe": {
            "ru": "üßÄ 150–≥ —Ç–≤–æ—Ä–æ–≥–∞ 5%, üçé 1 —è–±–ª–æ–∫–æ. –ù–∞—Ä–µ–∂—å —è–±–ª–æ–∫–æ, —Å–º–µ—à–∞–π —Å —Ç–≤–æ—Ä–æ–≥–æ–º.",
            "en": "üßÄ 150g 5% cottage cheese, üçé 1 apple. Chop the apple, mix with cottage cheese.",
            "uk": "üßÄ 150–≥ —Ç–≤–æ—Ä–æ–≥—É 5%, üçé 1 —è–±–ª—É–∫–æ. –ù–∞—Ä—ñ–∂ —è–±–ª—É–∫–æ, –∑–º—ñ—à–∞–π –∑ —Ç–≤–æ—Ä–æ–≥–æ–º."
        }
    },
    {
        "name": {
            "ru": "–Ø–∏—á–Ω–∏—Ü–∞ —Å –∫–∞—Ä—Ç–æ—Ñ–µ–ª–µ–º",
            "en": "Scrambled Eggs with Potatoes",
            "uk": "–Ø—î—á–Ω—è –∑ –∫–∞—Ä—Ç–æ–ø–ª–µ—é"
        },
        "calories": 500,
        "protein": 20,
        "fat": 25,
        "carbs": 50,
        "recipe": {
            "ru": "ü•ö 3 —è–π—Ü–∞, ü•î 200–≥ –∫–∞—Ä—Ç–æ—Ñ–µ–ª—è. –û–±–∂–∞—Ä—å —è–π—Ü–∞ —Å –≤–∞—Ä–µ–Ω—ã–º –∫–∞—Ä—Ç–æ—Ñ–µ–ª–µ–º.",
            "en": "ü•ö 3 eggs, ü•î 200g potatoes. Fry eggs with boiled potatoes.",
            "uk": "ü•ö 3 —è–π—Ü—è, ü•î 200–≥ –∫–∞—Ä—Ç–æ–ø–ª—ñ. –û–±—Å–º–∞–∂ —è–π—Ü—è –∑ –≤–∞—Ä–µ–Ω–æ—é –∫–∞—Ä—Ç–æ–ø–ª–µ—é."
        }
    },
]

# –ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ü–∏—Ç–∞—Ç—ã
QUOTES = {
    "ru": ["üí™ –°–∏–ª–∞ –≤ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–µ!"],
    "en": ["üí™ Strength lies in discipline!"],
    "uk": ["üí™ –°–∏–ª–∞ –≤ –¥–∏—Å—Ü–∏–ø–ª—ñ–Ω—ñ!"]
}

# –¢–µ–∫—Å—Ç—ã –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–∞—Ö
TEXTS = {
    "ru": {
        "welcome": "üí™ *–ü—Ä–∏–≤–µ—Ç! –Ø MuscleMenu!* –ü–æ–º–æ–≥—É —Ç–µ–±–µ –Ω–∞–±—Ä–∞—Ç—å –º–∞—Å—Å—É.\n–î–∞–≤–∞–π –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ç–µ–±—è. –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?",
        "name": "–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?",
        "height": "–ö–∞–∫–æ–π —É —Ç–µ–±—è —Ä–æ—Å—Ç (–≤ —Å–º)?",
        "weight": "–ö–∞–∫–æ–π —É —Ç–µ–±—è –≤–µ—Å (–≤ –∫–≥)?",
        "age": "–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?",
        "activity": "–ö–∞–∫–æ–π —É —Ç–µ–±—è —É—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (–Ω–∏–∑–∫–∞—è/—Å—Ä–µ–¥–Ω—è—è/–≤—ã—Å–æ–∫–∞—è)?",
        "workouts": "–°–∫–æ–ª—å–∫–æ —É —Ç–µ–±—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –≤ –Ω–µ–¥–µ–ª—é?",
        "goal": "–ö–∞–∫–∞—è —Ç–≤–æ—è —Ü–µ–ª—å? (–Ω–∞–±–æ—Ä –º–∞—Å—Å—ã/—Å–Ω–∏–∂–µ–Ω–∏–µ –≤–µ—Å–∞/–ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ –≤–µ—Å–∞)",
        "preferences": "–ö–∞–∫–∏–µ –ø—Ä–æ–¥—É–∫—Ç—ã —Ç—ã –ª—é–±–∏—à? (–ù–∞–ø—Ä–∏–º–µ—Ä: üçó –∫—É—Ä–∏—Ü–∞, ü•ö —è–π—Ü–∞, üçö —Ä–∏—Å)\n–û—Å—Ç–∞–≤—å –ø—É—Å—Ç—ã–º, –µ—Å–ª–∏ –Ω–µ—Ç –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π.",
        "saved": "‚úÖ *–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!* –ß—Ç–æ –¥–∞–ª—å—à–µ?",
        "daily_plan": "üçΩ *–î–Ω–µ–≤–Ω–æ–π —Ä–∞—Ü–∏–æ–Ω* üçΩ",
        "payment_success": "üéâ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!",
        "subscription_end": "‚è∞ –¢–≤–æ—è –ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ {days} –¥–Ω–µ–π! –ü—Ä–æ–¥–ª–∏ –∑–∞ 500 UAH –∏–ª–∏ 50 XTR.",
        "subscription_expired": "‚ö†Ô∏è –¢–≤–æ—è –ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å. –î–æ—Å—Ç—É–ø –∫ –¥–Ω–µ–≤–Ω–æ–º—É —Ä–∞—Ü–∏–æ–Ω—É –æ–≥—Ä–∞–Ω–∏—á–µ–Ω.",
        "register_first": "–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å!",
        "back_to_main": "üí™ *MuscleMenu* ‚Äî —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ –Ω–∞–±–æ—Ä–µ –º–∞—Å—Å—ã!\n–ß—Ç–æ –¥–∞–ª—å—à–µ?"
    },
    "en": {
        "welcome": "üí™ *Hello! I‚Äôm MuscleMenu!* I‚Äôll help you gain mass.\nLet‚Äôs get you registered. What‚Äôs your name?",
        "name": "What‚Äôs your name?",
        "height": "What‚Äôs your height (in cm)?",
        "weight": "What‚Äôs your weight (in kg)?",
        "age": "How old are you?",
        "activity": "What‚Äôs your activity level (low/medium/high)?",
        "workouts": "How many workouts do you have per week?",
        "goal": "What‚Äôs your goal? (weight gain/weight loss/weight maintenance)",
        "preferences": "What foods do you like? (E.g., üçó chicken, ü•ö eggs, üçö rice)\nLeave empty if no preferences.",
        "saved": "‚úÖ *Data saved!* What‚Äôs next?",
        "daily_plan": "üçΩ *Daily Meal Plan* üçΩ",
        "payment_success": "üéâ Thank you for your purchase!",
        "subscription_end": "‚è∞ Your subscription ends in {days} days! Renew for 500 UAH or 50 XTR.",
        "subscription_expired": "‚ö†Ô∏è Your subscription has expired. Access to daily meal plans is restricted.",
        "register_first": "Register first!",
        "back_to_main": "üí™ *MuscleMenu* ‚Äî your mass-gaining assistant!\nWhat‚Äôs next?"
    },
    "uk": {
        "welcome": "üí™ *–ü—Ä–∏–≤—ñ—Ç! –Ø MuscleMenu!* –î–æ–ø–æ–º–æ–∂—É —Ç–æ–±—ñ –Ω–∞–±—Ä–∞—Ç–∏ –º–∞—Å—É.\n–î–∞–≤–∞–π –∑–∞—Ä–µ—î—Å—Ç—Ä—É—î–º–æ —Ç–µ–±–µ. –Ø–∫ —Ç–µ–±–µ –∑–≤–∞—Ç–∏?",
        "name": "–Ø–∫ —Ç–µ–±–µ –∑–≤–∞—Ç–∏?",
        "height": "–Ø–∫–∏–π —É —Ç–µ–±–µ –∑—Ä—ñ—Å—Ç (–≤ —Å–º)?",
        "weight": "–Ø–∫–∞ —É —Ç–µ–±–µ –≤–∞–≥–∞ (–≤ –∫–≥)?",
        "age": "–°–∫—ñ–ª—å–∫–∏ —Ç–æ–±—ñ —Ä–æ–∫—ñ–≤?",
        "activity": "–Ø–∫–∏–π —É —Ç–µ–±–µ —Ä—ñ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ (–Ω–∏–∑—å–∫–∏–π/—Å–µ—Ä–µ–¥–Ω—ñ–π/–≤–∏—Å–æ–∫–∏–π)?",
        "workouts": "–°–∫—ñ–ª—å–∫–∏ —É —Ç–µ–±–µ —Ç—Ä–µ–Ω—É–≤–∞–Ω—å –Ω–∞ —Ç–∏–∂–¥–µ–Ω—å?",
        "goal": "–Ø–∫–∞ —Ç–≤–æ—è –º–µ—Ç–∞? (–Ω–∞–±—ñ—Ä –º–∞—Å–∏/—Å—Ö—É–¥–Ω–µ–Ω–Ω—è/–ø—ñ–¥—Ç—Ä–∏–º–∫–∞ –≤–∞–≥–∏)",
        "preferences": "–Ø–∫—ñ –ø—Ä–æ–¥—É–∫—Ç–∏ —Ç–∏ –ª—é–±–∏—à? (–ù–∞–ø—Ä–∏–º–µ—Ä: üçó –∫—É—Ä–∫–∞, ü•ö —è–π—Ü—è, üçö —Ä–∏—Å)\n–ó–∞–ª–∏—à –ø–æ—Ä–æ–∂–Ω—ñ–º, —è–∫—â–æ –Ω–µ–º–∞—î –≤–ø–æ–¥–æ–±–∞–Ω—å.",
        "saved": "‚úÖ *–î–∞–Ω—ñ –∑–±–µ—Ä–µ–∂–µ–Ω–æ!* –©–æ –¥–∞–ª—ñ?",
        "daily_plan": "üçΩ *–î–µ–Ω–Ω–∏–π —Ä–∞—Ü—ñ–æ–Ω* üçΩ",
        "payment_success": "üéâ –î—è–∫—É—é –∑–∞ –ø–æ–∫—É–ø–∫—É!",
        "subscription_end": "‚è∞ –¢–≤–æ—è –ø—ñ–¥–ø–∏—Å–∫–∞ –∑–∞–∫—ñ–Ω—á—É—î—Ç—å—Å—è —á–µ—Ä–µ–∑ {days} –¥–Ω—ñ–≤! –ü—Ä–æ–¥–æ–≤–∂ –∑–∞ 500 UAH –∞–±–æ 50 XTR.",
        "subscription_expired": "‚ö†Ô∏è –¢–≤–æ—è –ø—ñ–¥–ø–∏—Å–∫–∞ –∑–∞–∫—ñ–Ω—á–∏–ª–∞—Å—è. –î–æ—Å—Ç—É–ø –¥–æ –¥–µ–Ω–Ω–æ–≥–æ —Ä–∞—Ü—ñ–æ–Ω—É –æ–±–º–µ–∂–µ–Ω–æ.",
        "register_first": "–°–ø–æ—á–∞—Ç–∫—É –∑–∞—Ä–µ—î—Å—Ç—Ä—É–π—Ç–µ—Å—å!",
        "back_to_main": "üí™ *MuscleMenu* ‚Äî —Ç–≤—ñ–π –ø–æ–º—ñ—á–Ω–∏–∫ —É –Ω–∞–±–æ—Ä—ñ –º–∞—Å–∏!\n–©–æ –¥–∞–ª—ñ?"
    }
}

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π FSM
class UserForm(StatesGroup):
    name = State()
    height = State()
    weight = State()
    age = State()
    activity = State()
    workouts = State()
    goal = State()  # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ü–µ–ª–∏
    preferences = State()

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def get_main_menu(language="ru"):
    return types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="üçΩ", callback_data="daily_plan")],
        [types.InlineKeyboardButton(text="üåê –Ø–∑—ã–∫" if language == "ru" else "üåê Language" if language == "en" else "üåê –ú–æ–≤–∞", callback_data="switch_language")]
    ])

# –ë—ã—Å—Ç—Ä–æ–µ –º–µ–Ω—é
def get_quick_menu(language="ru"):
    return types.ReplyKeyboardMarkup(
        keyboard=[
            [types.KeyboardButton(text="Daily Plan" if language == "en" else "–î–Ω–µ–≤–Ω–æ–π —Ä–∞—Ü–∏–æ–Ω" if language == "ru" else "–î–µ–Ω–Ω–∏–π —Ä–∞—Ü—ñ–æ–Ω")],
            [types.KeyboardButton(text="üåê Language" if language == "en" else "üåê –Ø–∑—ã–∫" if language == "ru" else "üåê –ú–æ–≤–∞")],
            [types.KeyboardButton(text="Back" if language == "en" else "–ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True,
        one_time_keyboard=False
    )

# –ú–µ–Ω—é —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥" –∏ "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è"
def get_back_menu(text_to_share="", language="ru"):
    markup = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥" if language == "ru" else "‚¨ÖÔ∏è Back" if language == "en" else "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ])
    if text_to_share:
        markup.inline_keyboard.append([types.InlineKeyboardButton(text="üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è" if language == "ru" else "üì§ Share" if language == "en" else "üì§ –ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è", url=f"https://t.me/share/url?url={text_to_share.replace(' ', '%20')}")])
    return markup

async def create_stripe_link(user_id):
    session = stripe.checkout.Session.create(
        payment_method_types=["card"],
        line_items=[{
            "price_data": {
                "currency": "uah",
                "product_data": {"name": "Monthly Meal Plan Subscription"},
                "unit_amount": 50000,  # 500 UAH
            },
            "quantity": 1,
        }],
        mode="payment",
        success_url=f"{WEBHOOK_HOST}/success",
        cancel_url=f"{WEBHOOK_HOST}/cancel",
        metadata={"user_id": str(user_id)}
    )
    return session.url

async def generate_daily_recipe(user_data):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–Ω–µ–≤–Ω–æ–π —Ä–∞—Ü–∏–æ–Ω –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    –£—á–∏—Ç—ã–≤–∞–µ—Ç –≤–æ–∑—Ä–∞—Å—Ç, –≤–µ—Å, —Ä–æ—Å—Ç, –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å, —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏, –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –∏ —Ü–µ–ª—å.
    """
    height = user_data["height"]
    weight = user_data["weight"]
    age = user_data["age"]
    activity_level = user_data["activity_level"].lower()
    workouts_per_week = user_data["workouts_per_week"]
    preferences = user_data.get("preferences", "").lower().split(", ") if user_data.get("preferences") else []
    goal = user_data.get("goal", "gain_mass")
    language = user_data.get("language", "ru")  # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    # –†–∞—Å—á—ë—Ç –±–∞–∑–æ–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è –º–µ—Ç–∞–±–æ–ª–∏–∑–º–∞ (BMR) –ø–æ —Ñ–æ—Ä–º—É–ª–µ –ú–∏—Ñ—Ñ–ª–∏–Ω–∞-–°–∞–Ω –ñ–µ–æ—Ä–∞
    bmr = 10 * weight + 6.25 * height - 5 * age + 5  # –î–ª—è –º—É–∂—á–∏–Ω, –¥–ª—è –∂–µ–Ω—â–∏–Ω: + (-161)
    activity_multipliers = {
        "–Ω–∏–∑–∫–∞—è": 1.2,
        "—Å—Ä–µ–¥–Ω—è—è": 1.55,
        "–≤—ã—Å–æ–∫–∞—è": 1.9,
        "low": 1.2,
        "medium": 1.55,
        "high": 1.9,
        "–Ω–∏–∑—å–∫–∏–π": 1.2,
        "—Å–µ—Ä–µ–¥–Ω—ñ–π": 1.55,
        "–≤–∏—Å–æ–∫–∏–π": 1.9
    }
    total_calories = bmr * activity_multipliers[activity_level] + (workouts_per_week * 300)  # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–ª–æ—Ä–∏–∏ –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫

    # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –∫–∞–ª–æ—Ä–∏–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ü–µ–ª–∏
    if goal == "gain_mass":
        total_calories *= 1.15  # –ù–∞–±–æ—Ä –º–∞—Å—Å—ã ‚Äî +15%
    elif goal == "lose_weight":
        total_calories *= 0.85  # –°–Ω–∏–∂–µ–Ω–∏–µ –≤–µ—Å–∞ ‚Äî -15%
    elif goal == "maintain_weight":
        total_calories *= 1.0  # –ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ –≤–µ—Å–∞ ‚Äî –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π

    # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–ª–æ—Ä–∏–∏ –Ω–∞ –º–∞–∫—Ä–æ–Ω—É—Ç—Ä–∏–µ–Ω—Ç—ã (–ø—Ä–∏–º–µ—Ä: 40% —É–≥–ª–µ–≤–æ–¥—ã, 30% –±–µ–ª–∫–∏, 30% –∂–∏—Ä—ã)
    carbs_cal = total_calories * 0.4 / 4  # –£–≥–ª–µ–≤–æ–¥—ã (4 –∫–∫–∞–ª/–≥)
    protein_cal = total_calories * 0.3 / 4  # –ë–µ–ª–∫–∏ (4 –∫–∫–∞–ª/–≥)
    fat_cal = total_calories * 0.3 / 9  # –ñ–∏—Ä—ã (9 –∫–∫–∞–ª/–≥)

    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ä–µ—Ü–µ–ø—Ç—ã –ø–æ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è–º, –µ—Å–ª–∏ –æ–Ω–∏ —É–∫–∞–∑–∞–Ω—ã
    available_recipes = RECIPES
    if preferences:
        available_recipes = [recipe for recipe in RECIPES if any(pref in recipe["recipe"]["ru"].lower() for pref in preferences)]

    if not available_recipes:
        available_recipes = RECIPES  # –ï—Å–ª–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –Ω–µ –ø–æ–¥—Ö–æ–¥—è—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å–µ —Ä–µ—Ü–µ–ø—Ç—ã

    # –†–∞–∑–±–∏–≤–∞–µ–º –æ–±—â–∏–π –∫–∞–ª–ª–æ—Ä–∞–∂ –Ω–∞ 4 –ø—Ä–∏—ë–º–∞ –ø–∏—â–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∑–∞–≤—Ç—Ä–∞–∫, –æ–±–µ–¥, —É–∂–∏–Ω, –ø–µ—Ä–µ–∫—É—Å)
    meals_per_day = 4
    calories_per_meal = total_calories / meals_per_day

    # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏—ë–º–∞ –ø–∏—â–∏, —á—Ç–æ–±—ã –ø–æ–∫—Ä—ã—Ç—å –¥–Ω–µ–≤–Ω—É—é –Ω–æ—Ä–º—É –∫–∞–ª–æ—Ä–∏–π
    selected_recipes = []
    total_cal = 0
    for _ in range(meals_per_day):
        meal_recipes = []
        meal_cal = 0
        for recipe in available_recipes:
            if meal_cal < calories_per_meal * 0.9:  # –û—Å—Ç–∞–≤–ª—è–µ–º 10% –¥–ª—è –≥–∏–±–∫–æ—Å—Ç–∏ –≤ –∫–∞–∂–¥–æ–º –ø—Ä–∏—ë–º–µ
                meal_recipes.append(recipe)
                meal_cal += recipe["calories"]
            if len(meal_recipes) >= 1:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 1 –±–ª—é–¥–∞ –Ω–∞ –ø—Ä–∏—ë–º –ø–∏—â–∏
                break
        selected_recipes.append(meal_recipes[0] if meal_recipes else random.choice(available_recipes))
        total_cal += meal_cal

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Ä–∞—Ü–∏–æ–Ω–∞
    meal_names = {
        "ru": ["–ó–∞–≤—Ç—Ä–∞–∫", "–û–±–µ–¥", "–£–∂–∏–Ω", "–ü–µ—Ä–µ–∫—É—Å"],
        "en": ["Breakfast", "Lunch", "Dinner", "Snack"],
        "uk": ["–°–Ω—ñ–¥–∞–Ω–æ–∫", "–û–±—ñ–¥", "–í–µ—á–µ—Ä—è", "–ü–µ—Ä–µ–∫—É—Å"]
    }
    goal_text = {
        "ru": f"–¶–µ–ª—å: {goal.replace('_', ' ').title()}",
        "en": f"Goal: {goal.replace('_', ' ').title()}",
        "uk": f"–ú–µ—Ç–∞: {goal.replace('_', ' ').title()}"
    }
    ration_text = f"üçΩ *{'–î–Ω–µ–≤–Ω–æ–π —Ä–∞—Ü–∏–æ–Ω' if language == 'ru' else 'Daily Meal Plan' if language == 'en' else '–î–µ–Ω–Ω–∏–π —Ä–∞—Ü—ñ–æ–Ω'}*\n\n{goal_text[language]}\n\n"
    for i, recipe in enumerate(selected_recipes):
        ration_text += f"- {meal_names[language][i]}: {recipe['name'][language]} ({recipe['calories']} –∫–∫–∞–ª, –±–µ–ª–∫–∏: {recipe['protein']}–≥, –∂–∏—Ä—ã: {recipe['fat']}–≥, —É–≥–ª–µ–≤–æ–¥—ã: {recipe['carbs']}–≥)\n  {recipe['recipe'][language]}\n\n"
    ration_text += f"–û–±—â–∞—è –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å: {total_cal:.0f} –∫–∫–∞–ª (–ø—Ä–∏–º–µ—Ä–Ω–æ {total_calories:.0f} –∫–∫–∞–ª –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–ª—è {goal.replace('_', ' ').title()})."

    return ration_text

@dp.message(Command(commands=['start']))
async def start(message: types.Message, state: FSMContext):
    logging.info(f"Received /start from user {message.from_user.id}")
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ
        user = await db.get_user(message.from_user.id)
        if user:
            language = user["language"]
            subscription = await db.get_subscription(message.from_user.id)
            now = datetime.now()
            logging.info(f"User {message.from_user.id} already exists. Subscription status: {subscription}")

            # –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –∏–ª–∏ —Ç—Ä–∏–∞–ª –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –º–µ–Ω—é
            if subscription and subscription["subscription_end"] and subscription["subscription_end"] > now:
                await message.reply(TEXTS[language]["back_to_main"], reply_markup=get_quick_menu(language), parse_mode="Markdown")
                logging.info(f"User {message.from_user.id} has active subscription, showing main menu with quick keyboard")
                return
            elif not subscription or not subscription["trial_used"]:
                await db.reset_trial(message.from_user.id)  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç—Ä–∏–∞–ª –¥–ª—è –Ω–æ–≤–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
                await message.reply(TEXTS[language]["back_to_main"], reply_markup=get_quick_menu(language), parse_mode="Markdown")
                logging.info(f"User {message.from_user.id} has no trial used, showing main menu with quick keyboard with trial reset")
                return

            # –ï—Å–ª–∏ —Ç—Ä–∏–∞–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É
            markup = types.InlineKeyboardMarkup(inline_keyboard=[
                [types.InlineKeyboardButton(text="üí´ Stars (50 XTR)", callback_data="pay_stars"),
                 types.InlineKeyboardButton(text="üí≥ –ö–∞—Ä—Ç–∞ (500 UAH)", callback_data="pay_stripe")],
                [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
            ])
            await message.reply(
                TEXTS[language]["daily_plan"] if language in TEXTS and "daily_plan" in TEXTS[language] else "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 30 –¥–Ω–µ–π –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–Ω–µ–≤–Ω–æ–º—É —Ä–∞—Ü–∏–æ–Ω—É:",
                reply_markup=markup
            )
            logging.info(f"Offered subscription for user {message.from_user.id} because trial_used=True")
            return

        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –Ω–∞—á–∏–Ω–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
        await message.reply("üí™ *–ü—Ä–∏–≤–µ—Ç! –Ø MuscleMenu!* –ü–æ–º–æ–≥—É —Ç–µ–±–µ –Ω–∞–±—Ä–∞—Ç—å –º–∞—Å—Å—É.\n–î–∞–≤–∞–π –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ç–µ–±—è. –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?", reply_markup=get_quick_menu("ru"), parse_mode="Markdown")
        await state.set_state(UserForm.name)
        logging.info(f"Sent welcome message and set state for user {message.from_user.id} with quick keyboard")
    except Exception as e:
        logging.error(f"Error in start handler for user {message.from_user.id}: {e}")
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=get_quick_menu("ru"), parse_mode="Markdown")

@dp.message(UserForm.name)
async def process_name(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    logging.info(f"Received message '{message.text}' from user {message.from_user.id} with state {current_state}")
    try:
        await state.update_data(name=message.text)
        await message.reply("–ö–∞–∫–æ–π —É —Ç–µ–±—è —Ä–æ—Å—Ç (–≤ —Å–º)?", reply_markup=get_quick_menu("ru"))
        await state.set_state(UserForm.height)
        logging.info(f"Processed name and set height state for user {message.from_user.id}")
    except Exception as e:
        logging.error(f"Error in process_name for user {message.from_user.id}: {e}")

@dp.message(UserForm.height)
async def process_height(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    logging.info(f"Received message '{message.text}' from user {message.from_user.id} with state {current_state}")
    try:
        height = int(message.text)
        await state.update_data(height=height)
        await message.reply("–ö–∞–∫–æ–π —É —Ç–µ–±—è –≤–µ—Å (–≤ –∫–≥)?", reply_markup=get_quick_menu("ru"))
        await state.set_state(UserForm.weight)
        logging.info(f"Processed height and set weight state for user {message.from_user.id}")
    except ValueError:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ —á–∏—Å–ª–æ. –ö–∞–∫–æ–π —É —Ç–µ–±—è —Ä–æ—Å—Ç (–≤ —Å–º)?", reply_markup=get_quick_menu("ru"))
    except Exception as e:
        logging.error(f"Error in process_height for user {message.from_user.id}: {e}")

@dp.message(UserForm.weight)
async def process_weight(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    logging.info(f"Received message '{message.text}' from user {message.from_user.id} with state {current_state}")
    try:
        weight = int(message.text)
        await state.update_data(weight=weight)
        await message.reply("–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?", reply_markup=get_quick_menu("ru"))
        await state.set_state(UserForm.age)
        logging.info(f"Processed weight and set age state for user {message.from_user.id}")
    except ValueError:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ —á–∏—Å–ª–æ. –ö–∞–∫–æ–π —É —Ç–µ–±—è –≤–µ—Å (–≤ –∫–≥)?", reply_markup=get_quick_menu("ru"))
    except Exception as e:
        logging.error(f"Error in process_weight for user {message.from_user.id}: {e}")

@dp.message(UserForm.age)
async def process_age(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    logging.info(f"Received message '{message.text}' from user {message.from_user.id} with state {current_state}")
    try:
        age = int(message.text)
        await state.update_data(age=age)
        await message.reply("–ö–∞–∫–æ–π —É —Ç–µ–±—è —É—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (–Ω–∏–∑–∫–∞—è/—Å—Ä–µ–¥–Ω—è—è/–≤—ã—Å–æ–∫–∞—è)?", reply_markup=get_quick_menu("ru"))
        await state.set_state(UserForm.activity)
        logging.info(f"Processed age and set activity state for user {message.from_user.id}")
    except ValueError:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ —á–∏—Å–ª–æ. –°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?", reply_markup=get_quick_menu("ru"))
    except Exception as e:
        logging.error(f"Error in process_age for user {message.from_user.id}: {e}")

@dp.message(UserForm.activity)
async def process_activity(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    logging.info(f"Received message '{message.text}' from user {message.from_user.id} with state {current_state}")
    activity_level = message.text.lower()
    if activity_level not in ["–Ω–∏–∑–∫–∞—è", "—Å—Ä–µ–¥–Ω—è—è", "–≤—ã—Å–æ–∫–∞—è", "low", "medium", "high", "–Ω–∏–∑—å–∫–∏–π", "—Å–µ—Ä–µ–¥–Ω—ñ–π", "–≤–∏—Å–æ–∫–∏–π"]:
        await message.reply("–£–∫–∞–∂–∏: –Ω–∏–∑–∫–∞—è/—Å—Ä–µ–¥–Ω—è—è/–≤—ã—Å–æ–∫–∞—è (–∏–ª–∏ low/medium/high, –Ω–∏–∑—å–∫–∏–π/—Å–µ—Ä–µ–¥–Ω—ñ–π/–≤–∏—Å–æ–∫–∏–π). –ö–∞–∫–æ–π —É —Ç–µ–±—è —É—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏?", reply_markup=get_quick_menu("ru"))
        return
    try:
        await state.update_data(activity_level=activity_level)
        await message.reply("–°–∫–æ–ª—å–∫–æ —É —Ç–µ–±—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –≤ –Ω–µ–¥–µ–ª—é?", reply_markup=get_quick_menu("ru"))
        await state.set_state(UserForm.workouts)
        logging.info(f"Processed activity_level and set workouts state for user {message.from_user.id}")
    except Exception as e:
        logging.error(f"Error in process_activity for user {message.from_user.id}: {e}")

@dp.message(UserForm.workouts)
async def process_workouts(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    logging.info(f"Received message '{message.text}' from user {message.from_user.id} with state {current_state}")
    try:
        workouts_per_week = int(message.text)
        await state.update_data(workouts_per_week=workouts_per_week)
        await message.reply("–ö–∞–∫–∞—è —Ç–≤–æ—è —Ü–µ–ª—å? (–Ω–∞–±–æ—Ä –º–∞—Å—Å—ã/—Å–Ω–∏–∂–µ–Ω–∏–µ –≤–µ—Å–∞/–ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ –≤–µ—Å–∞)\n–£–∫–∞–∂–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º, –∞–Ω–≥–ª–∏–π—Å–∫–æ–º –∏–ª–∏ —É–∫—Ä–∞–∏–Ω—Å–∫–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä: –Ω–∞–±–æ—Ä –º–∞—Å—Å—ã, weight loss, –Ω–∞–±—ñ—Ä –º–∞—Å–∏).", reply_markup=get_quick_menu("ru"))
        await state.set_state(UserForm.goal)
        logging.info(f"Processed workouts_per_week and set goal state for user {message.from_user.id}")
    except ValueError:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ —á–∏—Å–ª–æ. –°–∫–æ–ª—å–∫–æ —É —Ç–µ–±—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –≤ –Ω–µ–¥–µ–ª—é?", reply_markup=get_quick_menu("ru"))
    except Exception as e:
        logging.error(f"Error in process_workouts for user {message.from_user.id}: {e}")

@dp.message(UserForm.goal)
async def process_goal(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    logging.info(f"Received message '{message.text}' from user {message.from_user.id} with state {current_state}")
    goal = message.text.lower()
    valid_goals = {
        "–Ω–∞–±–æ—Ä –º–∞—Å—Å—ã": "gain_mass",
        "—Å–Ω–∏–∂–µ–Ω–∏–µ –≤–µ—Å–∞": "lose_weight",
        "–ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ –≤–µ—Å–∞": "maintain_weight",
        "weight gain": "gain_mass",
        "weight loss": "lose_weight",
        "weight maintenance": "maintain_weight",
        "–Ω–∞–±—ñ—Ä –º–∞—Å–∏": "gain_mass",
        "—Å—Ö—É–¥–Ω–µ–Ω–Ω—è": "lose_weight",
        "–ø—ñ–¥—Ç—Ä–∏–º–∫–∞ –≤–∞–≥–∏": "maintain_weight"
    }
    if goal not in valid_goals:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Ü–µ–ª—å: –Ω–∞–±–æ—Ä –º–∞—Å—Å—ã/—Å–Ω–∏–∂–µ–Ω–∏–µ –≤–µ—Å–∞/–ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ –≤–µ—Å–∞ (–∏–ª–∏ –∞–Ω–∞–ª–æ–≥ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º/—É–∫—Ä–∞–∏–Ω—Å–∫–æ–º).", reply_markup=get_quick_menu("ru"))
        return
    try:
        await state.update_data(goal=valid_goals[goal])
        await message.reply("–ö–∞–∫–∏–µ –ø—Ä–æ–¥—É–∫—Ç—ã —Ç—ã –ª—é–±–∏—à? (–ù–∞–ø—Ä–∏–º–µ—Ä: üçó –∫—É—Ä–∏—Ü–∞, ü•ö —è–π—Ü–∞, üçö —Ä–∏—Å)\n–û—Å—Ç–∞–≤—å –ø—É—Å—Ç—ã–º, –µ—Å–ª–∏ –Ω–µ—Ç –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π.", reply_markup=get_quick_menu("ru"))
        await state.set_state(UserForm.preferences)
        logging.info(f"Processed goal and set preferences state for user {message.from_user.id}")
    except Exception as e:
        logging.error(f"Error in process_goal for user {message.from_user.id}: {e}")

@dp.message(UserForm.preferences)
async def process_preferences(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    logging.info(f"Received message '{message.text}' from user {message.from_user.id} with state {current_state}")
    try:
        preferences = message.text.strip()
        data = await state.get_data()
        logging.info(f"Data from state: {data}")
        await db.add_user(
            message.from_user.id, data["name"], data["height"], data["weight"],
            data["age"], data["activity_level"], data["workouts_per_week"], preferences, "ru", data.get("goal", "gain_mass")
        )
        await message.reply("‚úÖ *–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!* –ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=get_quick_menu("ru"), parse_mode="Markdown")
        await state.clear()
        logging.info(f"Processed preferences and cleared state for user {message.from_user.id}")
    except Exception as e:
        logging.error(f"Error in process_preferences for user {message.from_user.id}: {e}")
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=get_quick_menu("ru"))

@dp.callback_query(lambda c: c.data == "daily_plan")
async def daily_plan(callback: types.CallbackQuery):
    logging.info(f"Received callback 'daily_plan' from user {callback.from_user.id}")
    try:
        user = await db.get_user(callback.from_user.id)
        if not user:
            await callback.message.reply("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å!", reply_markup=get_main_menu("ru"))
            return
        language = user["language"]
        subscription = await db.get_subscription(callback.from_user.id)
        now = datetime.now()
        logging.info(f"Subscription status for user {callback.from_user.id}: {subscription}")

        # –í—Ä–µ–º–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø –¥–ª—è user_id 898243089
        if callback.from_user.id == 898243089:
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–æ 2030 –≥–æ–¥–∞)
            if not subscription or not subscription["subscription_end"] or subscription["subscription_end"] < now:
                await db.set_subscription(callback.from_user.id, datetime(2030, 1, 1, 0, 0))  # –£—Å—Ç–∞–Ω–æ–≤–∏–º –ø–æ–¥–ø–∏—Å–∫—É –¥–æ 2030 –≥–æ–¥–∞
                subscription = await db.get_subscription(callback.from_user.id)  # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
            ration = await generate_daily_recipe(user)
            await callback.message.reply(ration, reply_markup=get_back_menu(ration, language), parse_mode="Markdown")
            logging.info(f"Provided free trial daily plan for user {callback.from_user.id} (testing mode)")
            return

        # –û–±—ã—á–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        if not subscription or (subscription and not subscription["trial_used"]):
            await db.set_trial_used(callback.from_user.id)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º, —á—Ç–æ —Ç—Ä–∏–∞–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω
            ration = await generate_daily_recipe(user)
            await callback.message.reply(ration, reply_markup=get_back_menu(ration, language), parse_mode="Markdown")
            logging.info(f"Provided trial daily plan for user {callback.from_user.id}")
        elif subscription and subscription["subscription_end"] and subscription["subscription_end"] > now:
            ration = await generate_daily_recipe(user)
            await callback.message.reply(ration, reply_markup=get_back_menu(ration, language), parse_mode="Markdown")
            logging.info(f"Provided subscribed daily plan for user {callback.from_user.id}")
        else:
            markup = types.InlineKeyboardMarkup(inline_keyboard=[
                [types.InlineKeyboardButton(text="üí´ Stars (50 XTR)", callback_data="pay_stars"),
                 types.InlineKeyboardButton(text="üí≥ –ö–∞—Ä—Ç–∞ (500 UAH)", callback_data="pay_stripe")],
                [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
            ])
            await callback.message.reply(
                TEXTS[language]["daily_plan"] if language in TEXTS and "daily_plan" in TEXTS[language] else "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 30 –¥–Ω–µ–π –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–Ω–µ–≤–Ω–æ–º—É —Ä–∞—Ü–∏–æ–Ω—É:",
                reply_markup=markup
            )
            logging.info(f"Offered subscription for user {callback.from_user.id}")
    except Exception as e:
        logging.error(f"Error in daily_plan for user {callback.from_user.id}: {e}")
        await callback.message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=get_main_menu("ru"))

@dp.callback_query(lambda c: c.data == "back_to_main")
async def back_to_main(callback: types.CallbackQuery):
    logging.info(f"Received callback 'back_to_main' from user {callback.from_user.id}")
    try:
        user = await db.get_user(callback.from_user.id)
        if not user:
            await callback.message.reply("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å!", reply_markup=get_main_menu("ru"))
            return
        language = user["language"]
        await callback.message.reply(TEXTS[language]["back_to_main"], reply_markup=get_quick_menu(language), parse_mode="Markdown")
        logging.info(f"Returned to main menu for user {callback.from_user.id}")
    except Exception as e:
        logging.error(f"Error in back_to_main for user {callback.from_user.id}: {e}")
        await callback.message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=get_quick_menu("ru"))

@dp.callback_query(lambda c: c.data == "switch_language")
async def switch_language(callback: types.CallbackQuery):
    logging.info(f"Received callback 'switch_language' from user {callback.from_user.id}")
    try:
        user = await db.get_user(callback.from_user.id)
        if not user:
            await callback.message
