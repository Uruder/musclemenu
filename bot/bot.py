import logging
import os
import random
import aiohttp
from aiogram import Bot, Dispatcher, types
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application
from aiohttp import web
from dotenv import load_dotenv
from database import Database
from datetime import datetime, timedelta
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command
import asyncio

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
WEBHOOK_HOST = os.getenv("WEBHOOK_HOST")
WEBHOOK_PATH = f"/webhook/{BOT_TOKEN}"
WEBHOOK_URL = f"{WEBHOOK_HOST}{WEBHOOK_PATH}"
WEBAPP_HOST = "0.0.0.0"
WEBAPP_PORT = int(os.getenv("PORT", 8080))
GROK_API_KEY = os.getenv("GROK_API_KEY")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logging.info(f"Bot starting with token: {BOT_TOKEN[:10]}...")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()
logging.info("Bot and Dispatcher initialized")

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
db = Database()
logging.info("Database object created")

# –ë–∞–∑–∞ —Ä–µ—Ü–µ–ø—Ç–æ–≤
RECIPES = [
    {"name": "–û–≤—Å—è–Ω–∫–∞ —Å –±–∞–Ω–∞–Ω–æ–º", "calories": 400, "protein": 10, "fat": 5, "carbs": 70, "recipe": "ü•£ 100–≥ –æ–≤—Å—è–Ω–∫–∏, üçå 1 –±–∞–Ω–∞–Ω. –ó–∞–ª–µ–π –∫–∏–ø—è—Ç–∫–æ–º, –¥–∞–π –Ω–∞—Å—Ç–æ—è—Ç—å—Å—è 5 –º–∏–Ω."},
    {"name": "–ö—É—Ä–∏—Ü–∞ —Å —Ä–∏—Å–æ–º", "calories": 600, "protein": 50, "fat": 10, "carbs": 60, "recipe": "üçó 150–≥ –∫—É—Ä–∏–Ω–æ–π –≥—Ä—É–¥–∫–∏, üçö 80–≥ —Ä–∏—Å–∞. –û—Ç–≤–∞—Ä–∏ –∫—É—Ä–∏—Ü—É –∏ —Ä–∏—Å."},
    {"name": "–¢–≤–æ—Ä–æ–≥ —Å —è–±–ª–æ–∫–æ–º", "calories": 350, "protein": 30, "fat": 5, "carbs": 40, "recipe": "üßÄ 150–≥ —Ç–≤–æ—Ä–æ–≥–∞ 5%, üçé 1 —è–±–ª–æ–∫–æ. –ù–∞—Ä–µ–∂—å —è–±–ª–æ–∫–æ, —Å–º–µ—à–∞–π —Å —Ç–≤–æ—Ä–æ–≥–æ–º."},
    {"name": "–Ø–∏—á–Ω–∏—Ü–∞ —Å –∫–∞—Ä—Ç–æ—Ñ–µ–ª–µ–º", "calories": 500, "protein": 20, "fat": 25, "carbs": 50, "recipe": "ü•ö 3 —è–π—Ü–∞, ü•î 200–≥ –∫–∞—Ä—Ç–æ—Ñ–µ–ª—è. –û–±–∂–∞—Ä—å —è–π—Ü–∞ —Å –≤–∞—Ä–µ–Ω—ã–º –∫–∞—Ä—Ç–æ—Ñ–µ–ª–µ–º."},
]

# –ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ü–∏—Ç–∞—Ç—ã
QUOTES = {
    "ru": ["üí™ –°–∏–ª–∞ –≤ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–µ!"],
    "en": ["üí™ Strength lies in discipline!"],
    "uk": ["üí™ –°–∏–ª–∞ –≤ –¥–∏—Å—Ü–∏–ø–ª—ñ–Ω—ñ!"]
}

# –¢–µ–∫—Å—Ç—ã –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–∞—Ö
TEXTS = {
    "ru": {
        "welcome": "üí™ *–ü—Ä–∏–≤–µ—Ç! –Ø MuscleMenu!* –ü–æ–º–æ–≥—É —Ç–µ–±–µ –Ω–∞–±—Ä–∞—Ç—å –º–∞—Å—Å—É.\n–î–∞–≤–∞–π –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ç–µ–±—è. –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?",
        "name": "–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?",
        "height": "–ö–∞–∫–æ–π —É —Ç–µ–±—è —Ä–æ—Å—Ç (–≤ —Å–º)?",
        "weight": "–ö–∞–∫–æ–π —É —Ç–µ–±—è –≤–µ—Å (–≤ –∫–≥)?",
        "age": "–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?",
        "activity": "–ö–∞–∫–æ–π —É —Ç–µ–±—è —É—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (–Ω–∏–∑–∫–∞—è/—Å—Ä–µ–¥–Ω—è—è/–≤—ã—Å–æ–∫–∞—è)?",
        "workouts": "–°–∫–æ–ª—å–∫–æ —É —Ç–µ–±—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –≤ –Ω–µ–¥–µ–ª—é?",
        "preferences": "–ö–∞–∫–∏–µ –ø—Ä–æ–¥—É–∫—Ç—ã —Ç—ã –ª—é–±–∏—à—å? (–ù–∞–ø—Ä–∏–º–µ—Ä: üçó –∫—É—Ä–∏—Ü–∞, ü•ö —è–π—Ü–∞, üçö —Ä–∏—Å)\n–û—Å—Ç–∞–≤—å –ø—É—Å—Ç—ã–º, –µ—Å–ª–∏ –Ω–µ—Ç –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π.",
        "saved": "‚úÖ *–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!* –ß—Ç–æ –¥–∞–ª—å—à–µ?",
        "daily_plan": "üçΩ *–î–Ω–µ–≤–Ω–æ–π —Ä–∞—Ü–∏–æ–Ω* üçΩ",
        "payment_success": "üéâ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!",
        "subscription_end": "‚è∞ –¢–≤–æ—è –ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ {days} –¥–Ω–µ–π! –ü—Ä–æ–¥–ª–∏ –∑–∞ 500 UAH –∏–ª–∏ 50 XTR.",
        "subscription_expired": "‚ö†Ô∏è –¢–≤–æ—è –ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å. –î–æ—Å—Ç—É–ø –∫ –¥–Ω–µ–≤–Ω–æ–º—É —Ä–∞—Ü–∏–æ–Ω—É –æ–≥—Ä–∞–Ω–∏—á–µ–Ω.",
        "register_first": "–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å!",
        "back_to_main": "üí™ *MuscleMenu* ‚Äî —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ –Ω–∞–±–æ—Ä–µ –º–∞—Å—Å—ã!\n–ß—Ç–æ –¥–∞–ª—å—à–µ?"
    },
    "en": {
        "welcome": "üí™ *Hello! I‚Äôm MuscleMenu!* I‚Äôll help you gain mass.\nLet‚Äôs get you registered. What‚Äôs your name?",
        "name": "What‚Äôs your name?",
        "height": "What‚Äôs your height (in cm)?",
        "weight": "What‚Äôs your weight (in kg)?",
        "age": "How old are you?",
        "activity": "What‚Äôs your activity level (low/medium/high)?",
        "workouts": "How many workouts do you have per week?",
        "preferences": "What foods do you like? (E.g., üçó chicken, ü•ö eggs, üçö rice)\nLeave empty if no preferences.",
        "saved": "‚úÖ *Data saved!* What‚Äôs next?",
        "daily_plan": "üçΩ *Daily Meal Plan* üçΩ",
        "payment_success": "üéâ Thank you for your purchase!",
        "subscription_end": "‚è∞ Your subscription ends in {days} days! Renew for 500 UAH or 50 XTR.",
        "subscription_expired": "‚ö†Ô∏è Your subscription has expired. Access to daily meal plans is restricted.",
        "register_first": "Register first!",
        "back_to_main": "üí™ *MuscleMenu* ‚Äî your mass-gaining assistant!\nWhat‚Äôs next?"
    },
    "uk": {
        "welcome": "üí™ *–ü—Ä–∏–≤—ñ—Ç! –Ø MuscleMenu!* –î–æ–ø–æ–º–æ–∂—É —Ç–æ–±—ñ –Ω–∞–±—Ä–∞—Ç–∏ –º–∞—Å—É.\n–î–∞–≤–∞–π –∑–∞—Ä–µ—î—Å—Ç—Ä—É—î–º–æ —Ç–µ–±–µ. –Ø–∫ —Ç–µ–±–µ –∑–≤–∞—Ç–∏?",
        "name": "–Ø–∫ —Ç–µ–±–µ –∑–≤–∞—Ç–∏?",
        "height": "–Ø–∫–∏–π —É —Ç–µ–±–µ –∑—Ä—ñ—Å—Ç (–≤ —Å–º)?",
        "weight": "–Ø–∫–∞ —É —Ç–µ–±–µ –≤–∞–≥–∞ (–≤ –∫–≥)?",
        "age": "–°–∫—ñ–ª—å–∫–∏ —Ç–æ–±—ñ —Ä–æ–∫—ñ–≤?",
        "activity": "–Ø–∫–∏–π —É —Ç–µ–±–µ —Ä—ñ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ (–Ω–∏–∑—å–∫–∏–π/—Å–µ—Ä–µ–¥–Ω—ñ–π/–≤–∏—Å–æ–∫–∏–π)?",
        "workouts": "–°–∫—ñ–ª—å–∫–∏ —É —Ç–µ–±–µ —Ç—Ä–µ–Ω—É–≤–∞–Ω—å –Ω–∞ —Ç–∏–∂–¥–µ–Ω—å?",
        "preferences": "–Ø–∫—ñ –ø—Ä–æ–¥—É–∫—Ç–∏ —Ç–∏ –ª—é–±–∏—à? (–ù–∞–ø—Ä–∏–º–µ—Ä: üçó –∫—É—Ä–∫–∞, ü•ö —è–π—Ü—è, üçö —Ä–∏—Å)\n–ó–∞–ª–∏—à –ø–æ—Ä–æ–∂–Ω—ñ–º, —è–∫—â–æ –Ω–µ–º–∞—î –≤–ø–æ–¥–æ–±–∞–Ω—å.",
        "saved": "‚úÖ *–î–∞–Ω—ñ –∑–±–µ—Ä–µ–∂–µ–Ω–æ!* –©–æ –¥–∞–ª—ñ?",
        "daily_plan": "üçΩ *–î–µ–Ω–Ω–∏–π —Ä–∞—Ü—ñ–æ–Ω* üçΩ",
        "payment_success": "üéâ –î—è–∫—É—é –∑–∞ –ø–æ–∫—É–ø–∫—É!",
        "subscription_end": "‚è∞ –¢–≤–æ—è –ø—ñ–¥–ø–∏—Å–∫–∞ –∑–∞–∫—ñ–Ω—á—É—î—Ç—å—Å—è —á–µ—Ä–µ–∑ {days} –¥–Ω—ñ–≤! –ü—Ä–æ–¥–æ–≤–∂ –∑–∞ 500 UAH –∞–±–æ 50 XTR.",
        "subscription_expired": "‚ö†Ô∏è –¢–≤–æ—è –ø—ñ–¥–ø–∏—Å–∫–∞ –∑–∞–∫—ñ–Ω—á–∏–ª–∞—Å—è. –î–æ—Å—Ç—É–ø –¥–æ –¥–µ–Ω–Ω–æ–≥–æ —Ä–∞—Ü—ñ–æ–Ω—É –æ–±–º–µ–∂–µ–Ω–æ.",
        "register_first": "–°–ø–æ—á–∞—Ç–∫—É –∑–∞—Ä–µ—î—Å—Ç—Ä—É–π—Ç–µ—Å—å!",
        "back_to_main": "üí™ *MuscleMenu* ‚Äî —Ç–≤—ñ–π –ø–æ–º—ñ—á–Ω–∏–∫ —É –Ω–∞–±–æ—Ä—ñ –º–∞—Å–∏!\n–©–æ –¥–∞–ª—ñ?"
    }
}

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π FSM
class UserForm(StatesGroup):
    name = State()
    height = State()
    weight = State()
    age = State()
    activity = State()
    workouts = State()
    preferences = State()

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def get_main_menu(language="ru"):
    return types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="üçΩ", callback_data="daily_plan")],
        [types.InlineKeyboardButton(text="üåê –Ø–∑—ã–∫" if language == "ru" else "üåê Language" if language == "en" else "üåê –ú–æ–≤–∞", callback_data="switch_language")]
    ])

# –ú–µ–Ω—é —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥" –∏ "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è"
def get_back_menu(text_to_share="", language="ru"):
    markup = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥" if language == "ru" else "‚¨ÖÔ∏è Back" if language == "en" else "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ])
    if text_to_share:
        markup.inline_keyboard.append([types.InlineKeyboardButton(text="üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è" if language == "ru" else "üì§ Share" if language == "en" else "üì§ –ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è", url=f"https://t.me/share/url?url={text_to_share.replace(' ', '%20')}")])
    return markup

async def create_stripe_link(user_id):
    session = stripe.checkout.Session.create(
        payment_method_types=["card"],
        line_items=[{
            "price_data": {
                "currency": "uah",
                "product_data": {"name": "Monthly Meal Plan Subscription"},
                "unit_amount": 50000,  # 500 UAH
            },
            "quantity": 1,
        }],
        mode="payment",
        success_url=f"{WEBHOOK_HOST}/success",
        cancel_url=f"{WEBHOOK_HOST}/cancel",
        metadata={"user_id": str(user_id)}
    )
    return session.url

async def generate_daily_recipe(user_data):
    return "–ü—Ä–∏–º–µ—Ä –¥–Ω–µ–≤–Ω–æ–≥–æ —Ä–∞—Ü–∏–æ–Ω–∞"

@dp.message(Command(commands=['start']))
async def start(message: types.Message, state: FSMContext):
    logging.info(f"Received /start from user {message.from_user.id}")
    try:
        await message.reply("üí™ *–ü—Ä–∏–≤–µ—Ç! –Ø MuscleMenu!* –ü–æ–º–æ–≥—É —Ç–µ–±–µ –Ω–∞–±—Ä–∞—Ç—å –º–∞—Å—Å—É.\n–î–∞–≤–∞–π –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ç–µ–±—è. –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?", parse_mode="Markdown")
        await state.set_state(UserForm.name)
        logging.info(f"Sent welcome message and set state for user {message.from_user.id}")
    except Exception as e:
        logging.error(f"Error in start handler for user {message.from_user.id}: {e}")

@dp.message(UserForm.name)
async def process_name(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    logging.info(f"Received message '{message.text}' from user {message.from_user.id} with state {current_state}")
    try:
        await state.update_data(name=message.text)
        await message.reply("–ö–∞–∫–æ–π —É —Ç–µ–±—è —Ä–æ—Å—Ç (–≤ —Å–º)?")
        await state.set_state(UserForm.height)
        logging.info(f"Processed name and set height state for user {message.from_user.id}")
    except Exception as e:
        logging.error(f"Error in process_name for user {message.from_user.id}: {e}")

@dp.message(UserForm.height)
async def process_height(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    logging.info(f"Received message '{message.text}' from user {message.from_user.id} with state {current_state}")
    try:
        height = int(message.text)
        await state.update_data(height=height)
        await message.reply("–ö–∞–∫–æ–π —É —Ç–µ–±—è –≤–µ—Å (–≤ –∫–≥)?")
        await state.set_state(UserForm.weight)
        logging.info(f"Processed height and set weight state for user {message.from_user.id}")
    except ValueError:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ —á–∏—Å–ª–æ. –ö–∞–∫–æ–π —É —Ç–µ–±—è —Ä–æ—Å—Ç (–≤ —Å–º)?")
    except Exception as e:
        logging.error(f"Error in process_height for user {message.from_user.id}: {e}")

@dp.message(UserForm.weight)
async def process_weight(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    logging.info(f"Received message '{message.text}' from user {message.from_user.id} with state {current_state}")
    try:
        weight = int(message.text)
        await state.update_data(weight=weight)
        await message.reply("–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?")
        await state.set_state(UserForm.age)
        logging.info(f"Processed weight and set age state for user {message.from_user.id}")
    except ValueError:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ —á–∏—Å–ª–æ. –ö–∞–∫–æ–π —É —Ç–µ–±—è –≤–µ—Å (–≤ –∫–≥)?")
    except Exception as e:
        logging.error(f"Error in process_weight for user {message.from_user.id}: {e}")

@dp.message(UserForm.age)
async def process_age(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    logging.info(f"Received message '{message.text}' from user {message.from_user.id} with state {current_state}")
    try:
        age = int(message.text)
        await state.update_data(age=age)
        await message.reply("–ö–∞–∫–æ–π —É —Ç–µ–±—è —É—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (–Ω–∏–∑–∫–∞—è/—Å—Ä–µ–¥–Ω—è—è/–≤—ã—Å–æ–∫–∞—è)?")
        await state.set_state(UserForm.activity)
        logging.info(f"Processed age and set activity state for user {message.from_user.id}")
    except ValueError:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ —á–∏—Å–ª–æ. –°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?")
    except Exception as e:
        logging.error(f"Error in process_age for user {message.from_user.id}: {e}")

@dp.message(UserForm.activity)
async def process_activity(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    logging.info(f"Received message '{message.text}' from user {message.from_user.id} with state {current_state}")
    activity = message.text.lower()
    if activity not in ["–Ω–∏–∑–∫–∞—è", "—Å—Ä–µ–¥–Ω—è—è", "–≤—ã—Å–æ–∫–∞—è", "low", "medium", "high", "–Ω–∏–∑—å–∫–∏–π", "—Å–µ—Ä–µ–¥–Ω—ñ–π", "–≤–∏—Å–æ–∫–∏–π"]:
        await message.reply("–£–∫–∞–∂–∏: –Ω–∏–∑–∫–∞—è/—Å—Ä–µ–¥–Ω—è—è/–≤—ã—Å–æ–∫–∞—è (–∏–ª–∏ low/medium/high, –Ω–∏–∑—å–∫–∏–π/—Å–µ—Ä–µ–¥–Ω—ñ–π/–≤–∏—Å–æ–∫–∏–π). –ö–∞–∫–æ–π —É —Ç–µ–±—è —É—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏?")
        return
    try:
        await state.update_data(activity=activity)
        await message.reply("–°–∫–æ–ª—å–∫–æ —É —Ç–µ–±—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –≤ –Ω–µ–¥–µ–ª—é?")
        await state.set_state(UserForm.workouts)
        logging.info(f"Processed activity and set workouts state for user {message.from_user.id}")
    except Exception as e:
        logging.error(f"Error in process_activity for user {message.from_user.id}: {e}")

@dp.message(UserForm.workouts)
async def process_workouts(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    logging.info(f"Received message '{message.text}' from user {message.from_user.id} with state {current_state}")
    try:
        workouts = int(message.text)
        await state.update_data(workouts=workouts)
        await message.reply("–ö–∞–∫–∏–µ –ø—Ä–æ–¥—É–∫—Ç—ã —Ç—ã –ª—é–±–∏—à—å? (–ù–∞–ø—Ä–∏–º–µ—Ä: üçó –∫—É—Ä–∏—Ü–∞, ü•ö —è–π—Ü–∞, üçö —Ä–∏—Å)\n–û—Å—Ç–∞–≤—å –ø—É—Å—Ç—ã–º, –µ—Å–ª–∏ –Ω–µ—Ç –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π.")
        await state.set_state(UserForm.preferences)
        logging.info(f"Processed workouts and set preferences state for user {message.from_user.id}")
    except ValueError:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ —á–∏—Å–ª–æ. –°–∫–æ–ª—å–∫–æ —É —Ç–µ–±—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –≤ –Ω–µ–¥–µ–ª—é?")
    except Exception as e:
        logging.error(f"Error in process_workouts for user {message.from_user.id}: {e}")

@dp.message(UserForm.preferences)
async def process_preferences(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    logging.info(f"Received message '{message.text}' from user {message.from_user.id} with state {current_state}")
    try:
        preferences = message.text.strip()
        data = await state.get_data()
        logging.info(f"Data from state: {data}")
        await db.add_user(
            message.from_user.id, data["name"], data["height"], data["weight"],
            data["age"], data["activity"], data["workouts"], preferences, "ru"
        )
        await message.reply("‚úÖ *–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!* –ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=get_main_menu("ru"), parse_mode="Markdown")
        await state.clear()  # –ò—Å–ø–æ–ª—å–∑—É–µ–º clear() –≤–º–µ—Å—Ç–æ finish()
        logging.info(f"Processed preferences and cleared state for user {message.from_user.id}")
    except Exception as e:
        logging.error(f"Error in process_preferences for user {message.from_user.id}: {e}")
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@dp.callback_query(lambda c: c.data == "daily_plan")
async def daily_plan(callback: types.CallbackQuery):
    logging.info(f"Received callback 'daily_plan' from user {callback.from_user.id}")
    user = await db.get_user(callback.from_user.id)
    if not user:
        await callback.message.reply("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å!", reply_markup=get_main_menu("ru"))
        return
    language = user["language"]
    subscription = await db.get_subscription(callback.from_user.id)
    now = datetime.now()
    logging.info(f"Subscription status for user {callback.from_user.id}: {subscription}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º –ø—Ä–æ–±–Ω—ã–π –¥–æ—Å—Ç—É–ø, –µ—Å–ª–∏ —Ç—Ä–∏–∞–ª –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω
    if not subscription:
        await db.set_trial_used(callback.from_user.id)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º trial_used=True –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        ration = await generate_daily_recipe(user)
        await callback.message.reply(ration, reply_markup=get_back_menu(ration, language), parse_mode="Markdown")
        logging.info(f"Provided trial daily plan for user {callback.from_user.id}")
    elif subscription and not subscription.get("trial_used", False):
        await db.set_trial_used(callback.from_user.id)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º trial_used=True
        ration = await generate_daily_recipe(user)
        await callback.message.reply(ration, reply_markup=get_back_menu(ration, language), parse_mode="Markdown")
        logging.info(f"Provided trial daily plan for user {callback.from_user.id}")
    elif subscription and subscription["subscription_end"] and subscription["subscription_end"] > now:
        ration = await generate_daily_recipe(user)
        await callback.message.reply(ration, reply_markup=get_back_menu(ration, language), parse_mode="Markdown")
        logging.info(f"Provided subscribed daily plan for user {callback.from_user.id}")
    elif subscription and subscription["trial_used"]:
        markup = types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text="üí´ Stars (50 XTR)", callback_data="pay_stars"),
             types.InlineKeyboardButton(text="üí≥ –ö–∞—Ä—Ç–∞ (500 UAH)", callback_data="pay_stripe")],
            [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ])
        await callback.message.reply(
            "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 30 –¥–Ω–µ–π –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–Ω–µ–≤–Ω–æ–º—É —Ä–∞—Ü–∏–æ–Ω—É:",
            reply_markup=markup
        )
        logging.info(f"Offered subscription for user {callback.from_user.id}")
    else:
        await callback.message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=get_main_menu(language))

@dp.callback_query(lambda c: c.data == "back_to_main")
async def back_to_main(callback: types.CallbackQuery):
    logging.info(f"Received callback 'back_to_main' from user {callback.from_user.id}")
    user = await db.get_user(callback.from_user.id)
    if not user:
        await callback.message.reply("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å!", reply_markup=get_main_menu("ru"))
        return
    language = user["language"]
    await callback.message.reply(TEXTS[language]["back_to_main"], reply_markup=get_main_menu(language), parse_mode="Markdown")
    logging.info(f"Returned to main menu for user {callback.from_user.id}")

@dp.callback_query(lambda c: c.data == "switch_language")
async def switch_language(callback: types.CallbackQuery):
    logging.info(f"Received callback 'switch_language' from user {callback.from_user.id}")
    user = await db.get_user(callback.from_user.id)
    if not user:
        await callback.message.reply("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å!", reply_markup=get_main_menu("ru"))
        return

    current_language = user["language"]
    languages = ["ru", "en", "uk"]
    current_index = languages.index(current_language)
    new_language = languages[(current_index + 1) % 3]  # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —è–∑—ã–∫

    # –û–±–Ω–æ–≤–ª—è–µ–º —è–∑—ã–∫ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await db.update_user_language(callback.from_user.id, new_language)
    await callback.message.reply(TEXTS[new_language]["back_to_main"], reply_markup=get_main_menu(new_language), parse_mode="Markdown")
    logging.info(f"Switched language to {new_language} for user {callback.from_user.id}")

@dp.callback_query(lambda c: c.data == "pay_stars")
async def pay_stars(callback: types.CallbackQuery):
    logging.info(f"Received callback 'pay_stars' from user {callback.from_user.id}")
    user = await db.get_user(callback.from_user.id)
    language = user["language"]
    await bot.send_invoice(
        callback.from_user.id,
        title="–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 30 –¥–Ω–µ–π",
        description="–î–æ—Å—Ç—É–ø –∫ –¥–Ω–µ–≤–Ω–æ–º—É —Ä–∞—Ü–∏–æ–Ω—É –Ω–∞ 30 –¥–Ω–µ–π",
        provider_token="",
        currency="XTR",
        prices=[types.LabeledPrice(label="–ü–æ–¥–ø–∏—Å–∫–∞", amount=50)],
        payload="subscription_stars"
    )

@dp.callback_query(lambda c: c.data == "pay_stripe")
async def pay_stripe(callback: types.CallbackQuery):
    logging.info(f"Received callback 'pay_stripe' from user {callback.from_user.id}")
    user = await db.get_user(callback.from_user.id)
    language = user["language"]
    payment_url = await create_stripe_link(callback.from_user.id)
    markup = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="–û–ø–ª–∞—Ç–∏—Ç—å", url=payment_url)]
    ])
    await callback.message.reply(
        "–ü–µ—Ä–µ–π–¥–∏ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã (500 UAH):",
        reply_markup=markup
    )

@dp.pre_checkout_query()
async def pre_checkout(pre_checkout_query: types.PreCheckoutQuery):
    logging.info(f"Received pre_checkout_query from user {pre_checkout_query.from_user.id}")
    await bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)

@dp.message()
async def successful_payment(message: types.Message):
    logging.info(f"Received message with content_type: {message.content_type} from user {message.from_user.id}")
    if message.content_type != types.ContentType.SUCCESSFUL_PAYMENT:
        return
    user = await db.get_user(message.from_user.id)
    language = user["language"]
    subscription_end = datetime.now() + timedelta(days=30)
    await db.set_subscription(message.from_user.id, subscription_end)
    ration = await generate_daily_recipe(user)
    await message.reply(ration + f"\n\n{TEXTS[language]['payment_success']}", reply_markup=get_back_menu(ration, language), parse_mode="Markdown")
    logging.info(f"Payment processed for user {message.from_user.id}")

async def send_reminders():
    logging.info("Starting reminders task")
    while True:
        await asyncio.sleep(24 * 60 * 60)
        async with db.pool.acquire() as conn:
            users = await conn.fetch("SELECT user_id, language FROM users")
            now = datetime.now()
            for user in users:
                language = user["language"]
                quote = random.choice(QUOTES[language])
                subscription = await db.get_subscription(user["user_id"])
                msg = f"‚è∞ {quote}"
                if subscription and subscription["subscription_end"]:
                    days_left = (subscription["subscription_end"] - now).days
                    if days_left <= 3 and days_left > 0:
                        msg += f"\n\n{TEXTS[language]['subscription_end'].format(days=days_left)}"
                    elif days_left <= 0:
                        await db.reset_subscription(user["user_id"])
                        msg += f"\n\n{TEXTS[language]['subscription_expired']}"
                await bot.send_message(user["user_id"], msg, reply_markup=get_main_menu(language))

async def on_startup(_):
    logging.info("Entering on_startup function")
    try:
        await db.connect()
        logging.info("Database connected")
        await db.create_tables()
        logging.info("Tables created")
        await bot.set_webhook(WEBHOOK_URL)
        logging.info(f"Webhook set to {WEBHOOK_URL}")
        asyncio.create_task(send_reminders())
        logging.info("Reminders task created")
    except Exception as e:
        logging.error(f"Startup failed: {e}")
        raise

async def on_shutdown(_):
    logging.info("Shutting down bot...")
    await bot.delete_webhook()
    await db.pool.close()
    logging.info("Webhook stopped and DB closed")

# –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏ –∑–∞–ø—É—Å–∫
app = web.Application()
app.on_startup.append(on_startup)
app.on_shutdown.append(on_shutdown)
request_handler = SimpleRequestHandler(dispatcher=dp, bot=bot)
request_handler.register(app, path=WEBHOOK_PATH)
setup_application(app, dp, bot=bot)

if __name__ == "__main__":
    logging.info("Preparing to run bot...")
    logging.info("Web app setup complete")
    web.run_app(app, host=WEBAPP_HOST, port=WEBAPP_PORT)
